= gradle-gitflow
Max KÃ¤ufer;
:version: 0.1.5
:doc-version: dev
:doc-path: https://amkay.github.io/gradle-gitflow/develop/doc
:doctype: book
:sectanchors:
:sectlinks:
:source-highlighter: highlightjs
:icons: font


image:https://api.bintray.com/packages/amkay/gradle-plugins/com.github.amkay%3Agradle-gitflow/images/download.svg["Download", link="https://bintray.com/amkay/gradle-plugins/com.github.amkay%3Agradle-gitflow/_latestVersion"]
image:https://img.shields.io/badge/docs-{doc-version}-blue.svg["Documentation", link="{doc-path}/groovydoc"]
image:http://stillmaintained.com/amkay/gradle-gitflow.svg["Project Status", link="https://stillmaintained.com/amkay/gradle-gitflow"]
image:https://img.shields.io/github/license/amkay/gradle-gitflow.svg["License", link="https://github.com/amkay/gradle-gitflow/blob/master/LICENSE.md"]
image:https://travis-ci.org/amkay/gradle-gitflow.svg?branch=develop["Build Status", link="https://travis-ci.org/amkay/gradle-gitflow"]
image:https://www.versioneye.com/user/projects/559c3d97616634001b000e87/badge.svg?style=flat["Dependency Status", link="https://www.versioneye.com/user/projects/559c3d97616634001b000e87"]
image:https://img.shields.io/badge/semver-2.0.0-blue.svg["Semantic Versioning", link="http://semver.org/spec/v2.0.0.html"]
image:https://img.shields.io/badge/git-flow-blue.svg["Gitflow", link="http://nvie.com/posts/a-successful-git-branching-model/"]

An opinionated plugin that provides http://semver.org/[Semantic Versioning] for https://gradle.org/[Gradle] projects that use http://nvie.com/posts/a-successful-git-branching-model/[Gitflow].

This plugin is heavily inspired by the https://github.com/ajoberstar/gradle-git[gradle-git] plugin.

IMPORTANT: It *intentionally* provides no https://gradle.org/[Gradle] tasks and interacts with http://git-scm.com/[Git] just for inferring the version of the project.

This inferred version is set as the project version of the https://gradle.org/[Gradle] project to which it is applied.



[[versioning]]
== Versioning

[[version-rules]]
=== Version rules

The rules applied when inferring the version are that simple:

* If the current commit is tagged this tag is used as a version -- regardless of the current branch
** this would usually be the normal version (`major.minor.patch`)
* Otherwise the version contains
** the normal version (`major.minor.patch`) extracted from the next reachable tag in the history
** a _pre-release identifier_ indicating the current branch
** a _pre-release identifier_ indicating the number of commits since the last tag
** a _build metadata identifier_ indicating the SHA of the current commit
** a _build metadata identifier_ indicating if the repository is dirty


[[version-structure]]
=== Version structure

The inferred versions consist of the following components:

----
1.2.3-dev.65+sha.9066228.dirty
| | |  |  |   |     |      |
| | |  |  |   |     |      indicates if the repository is dirty
| | |  |  |   |     |
| | |  |  |   |     abbreviated SHA of the current commit
| | |  |  |   |
| | |  |  |   prefix of the SHA
| | |  |  |
| | |  |  # of commits since the last tag
| | |  |
| | |  denotes the current branch
| | |
| | patch version
| |
| minor version
|
major version
----


[[branch-identifier-mapping]]
=== Mapping between Gitflow branch and pre-release identifier

The following table show the mapping between a Gitflow branch and the corresponding pre-release identifier that indicates this branch.

NOTE: If you use a Gitflow plugin for Git, _gradle-gitflow_ uses the branch names of your Gitflow configuration section in `.git/config`.

|===
| Gitflow branch | Default name in Gitflow plugins | Pre-release identifier | Notes

| production release
| `master`
| (empty string)
|

| development
| `develop`
| `dev`
|

| feature
| `feature/foo`
| `feature.foo`
|

| next release / pre-release
| `release/1.2.3`
| `pre`
| The normal version (`major.minor.patch`) is extracted from the branch name

| hotfix
| `hotfix/foo`
| `fix.foo`
|

| support
| `support/foo`
| `support.foo`
|
|===

NOTE: In case the current head is a _detached head_ the _pre-release identifier_ is `detached`.



[[usage]]
== Usage

Include the following in the project on which you want to apply the plugin:

[source,groovy,subs="attributes"]
----
buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.amkay:gradle-gitflow:{version}'
  }
}

apply plugin: 'com.github.amkay.gitflow'
----

NOTE: Builds of the current development version can always be obtained from https://github.com/amkay/gradle-gitflow/tree/gh-pages/develop[here].


[[configuration]]
=== Configuration

The plugin registers an extension object named `gitflow` that is the entry point to the configuration.
It also provides a DSL for keyword-based configuration, but configuration via properties is also possible.
The following example shows all configuration options:

[source,groovy]
----
gitflow {
  // Use a different Git repository
  repositoryRoot 'foo/bar' // defaults to project.projectDir

  // Pre-release identifiers based on Gitflow branches
  preReleaseIds {
    release 'foo'      // defaults to ''
    develop 'foo'      // defaults to 'dev'
    preRelease 'foo'   // defaults to 'pre'
    detachedHead 'foo' // defaults to 'detached'

    // The following ones are used as prefixes
    feature 'foo' // defaults to 'feature'
    hotfix 'foo'  // defaults to 'fix'
    support 'foo' // defaults to 'support'
  }

  // Build metadata identifiers that are used as static text
  buildMetadataIds {
    sha 'foo'   // Defaults to 'sha'
    dirty 'foo' // Defaults to 'dirty'
  }
}
----


[[additional-functionality]]
=== Additional functionality of the version object

The following additional functionality is provided by the version object that this plugin provides.
You can have a look at the {doc-path}/groovydoc[Groovydoc] documentation for further information.


[[version-type]]
==== Version type

The type of the inferred version is derived from the current branch and corresponds to the branches mentioned in <<branch-identifier-mapping>>.
This can be used in your buildscripts for distinguishing between development and production builds, e.g. for deploying to staging and production as seen in the following example.

[source,groovy]
----
import static com.github.amkay.gradle.gitflow.version.VersionType.*

task deploy << {
    if (version.type == DEVELOP) {
        // Deploy to staging...
    } else if (version.type == RELEASE) {
        // Deploy to production...
    }
}
----

TIP: For additional version types see the `enum` {doc-path}/groovydoc/com/github/amkay/gradle/gitflow/version/VersionType.html[VersionType] in the Groovydoc documentation.
