import com.github.amkay.gradle.gitflow.GitflowPlugin

def vJavaLang = '1.7'

wrapper.gradleVersion = '2.3'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

apply plugin: 'groovy'

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'com.github.zafarkhaja:java-semver:0.9.0'
    compile 'org.ajoberstar:grgit:1.1.0'
}

targetCompatibility = vJavaLang
sourceCompatibility = vJavaLang

apply plugin: 'eclipse'
apply plugin: 'idea'

idea {
    module.excludeDirs += [
        file('bin'),        // containing build artifacts from Eclipse (if any)
        file('.settings'),  // containing Eclipse metadata
        file("gradle"),
        file('.gradletasknamecache'),
        file('gradlew'),
        file('gradlew.bat')
    ]

    project.vcs = 'Git'
}

apply plugin: GitflowPlugin

group 'com.github.amkay'
description 'An opinionated plugin that provides Semantic Versioning for Gradle projects that use Gitflow.'

apply plugin: 'com.jfrog.bintray'

bintray {
    user = bintrayUser
    key = bintrayKey

    publications = ['main'] //When uploading Maven-based publication files

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = false //If version should be auto published after an upload

    pkg {
        repo = 'gradle-plugins'
        name = "${group}:${project.name}"
        desc = "$description"

        websiteUrl = 'https://github.com/amkay/gradle-gitflow'
        issueTrackerUrl = 'https://github.com/amkay/gradle-gitflow/issues'
        vcsUrl = 'https://github.com/amkay/gradle-gitflow.git'

        licenses = ['Apache-2.0']

        labels = ['gradle', 'plugin', 'git', 'gitflow', 'semver']

        publicDownloadNumbers = true

        //version {
            //name = '1.3-Final' //Bintray logical version name
            //desc = //Optional - Version-specific description'
            //released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            //vcsTag = "v${version}"
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            ////Optional configuration for GPG signing
            //gpg {
                //sign = true //Determines whether to GPG sign the files. The default is false
                //passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            //}
            ////Optional configuration for Maven Central sync of the version
            //mavenCentralSync {
                //sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                //user = 'userToken' //OSS user token
                //password = 'paasword' //OSS user password
                //close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            //}            
        //}
    }
}

apply plugin: 'maven-publish'

if(plugins['java']) {
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc.destinationDir
        classifier 'javadoc'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

if(plugins['groovy']) {
    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        from groovydoc.destinationDir
        classifier 'groovydoc'
    }

    artifacts {
        archives groovydocJar
    }
}

publishing {
    publications {
        main(MavenPublication) {
            if(plugins['java']) {
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }

            if(plugins['groovy']) {
                artifact groovydocJar
            }

            pom.withXml {
                def prj = project
                asNode().with {

                    appendNode('name', prj.name)
                    appendNode('description', prj.description)
                    appendNode('url', prj.bintray.pkg.websiteUrl)
                    appendNode('licenses').with { node ->
                        prj.bintray.pkg.licenses.each { license ->
                            node.appendNode('license').with {
                                appendNode('name', license)
                            }
                        }
                    }
                    appendNode('scm').with {
                        appendNode('connection', "scm:git:${prj.bintray.pkg.vcsUrl}")
                        appendNode('developerConnection', "scm:git:${prj.bintray.pkg.vcsUrl}")
                        appendNode('url', prj.bintray.pkg.websiteUrl)
                    }
                }
            }
        }
    }
}
